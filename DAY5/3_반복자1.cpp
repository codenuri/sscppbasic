// 5_반복자1
#include <iostream>
#include <vector>
#include <list>

// 반복자(iterator)
// => 컨테이너의 내부 구조에 상관없이 동일한 방법(++ 연산자)
//    으로 열거 할수 있도록하는 객체. 

int main()
{
	int x[10] = { 1,2,3,4,5,6,7,8,9,10 };

	// 배열의 시작 주소를 알면 모든 요소를 열거할수 있습니다
	int* p1 = x;

	// 배열은 연속된 메모리이므로 ++ 로 이동하면 다음요소에 갈수 있습니다.
	++p1;
	//--------------------------------------------------------

	std::list<int> s = { 1,2,3,4,5,6,7,8,9,10 };

	// STL 의 모든 컨테이너는 반복자를 꺼내면 모든 요소를 열거 할수
	// 있습니다.
	auto p2 = s.begin();

	// p2는
	// 1. 포인터가 아닌 객체 입니다.
	// 2. 내부적으로 list 의 1번째 요소를 주소를 가리킵니다.
	// 3. 포인터는 아니지만 포인터 처럼 사용가능하게 연산자가 재정의 되어 있습니다.

	int n = *p2; // p2.operator*() 

	++p2; // p2.operator++()

	n = *p2;

}